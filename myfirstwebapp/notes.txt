Building Java Web Application
    - JSP means JavaServer Pages
    - All JSPs should be created in this specific directory (Standard)
        - /src/main/resources/META-INF/resources/WEB-INF/jsp/

How does Web work?
    - A: Browser sends a request
        - HttpRequest
    - B: Server handles the request
        - Your Spring Boot Web Application
    - C: Server returns the response
        - HttpResponse

Peek into History - Model 1 Arch.
    - ALL CODE in Views (JSPs, ...)
        - View Logic
        - Flow Logic
        - Queries to databases
    - Disadvantages:
        - VERY complex JSPs
        - ZERO separation of concerns
        - Difficult to maintain

Peek into History - Model 2 Arch.
    - How about separating concerns?
        - Model: Data to generate the view
        - View: Show information to client/user
        - Controller: Controls the flow
    - Advantages:
        - Simpler to maintain
    - Concerns:
        -Where to implement common features to all controllers (Solution: see Model 2 Architecture with Front Controller)
    - Model 2 Architecture with Front Controller
        - Concept: All requests flow into a central controller
            - Called as Front Controller
        - Front Controller controls flow to Controller's and View's
            - Common features can be implemented in the Front Controller

Spring MVC Front Controller - Dispatcher Servlet
    - A: Receives HTTP request
    - B: Processes HTTP request
        - B1: Identifies correct Controller method
            - Based on request URL
        - B2: Executes Controller method
            - Returns Model and View Name
        - B3: Identifies the correct view
            - Using View Resolver
        - B4: Executes View
    - C: Returns HTTP response

Request vs Model vs Session
    - Request
        - Stores data for a single HTTP request, accessible during the request lifecycle
        - Lives only for the duration of a single HTTP request-response cycle
        - Recommended for most use cases
    - Model
        - Used to pass data between the controller and the view in MVC
        - Lives for the duration of the request, tied to request-scoped attributes in MVC
    - Session
        - Stores data across multiple HTTP requests for a user, tied to their session
        - Lives across multiple HTTP requests, lasting until the session times out or is invalidated
        - Be careful of what to store to session (Takes additional memory as all details are stored on server)

Validations with Spring Boot (Steps)
    - 1. Spring Boot Starter Validation
        - Add dependency in pom.xml
    - 2. Command Bean (Form Backing Object)
        - 2-way binding (addEditTodo.jsp & TodoController.jsp)
    - 3. Add Validation to Bean
        - Todo.Java
    - 4. Display Validation Errors in View
        - todo.jsp

Understanding Two-way Binding
    - First Side: Controller Bean to JSP Form
        - e.g., Binding data from data in controller method's body to form data in jsp
    - Second Side: JSP Form to Controller Bean
        - e.g., Binding data from form in jsp to controller method's parameter

Adding Spring Security
    - Upon adding Spring Security and running your project:
        - You will see a console log for your generated security password for development environment:
            - Username: user (default)
            - Password: 3ddaf5ac-205c-4686-ba16-083b90683dfa (this is logged in your console)
        - If we create Spring Security configuration to allow us to create a custom username and password, we don't have to use the generated password again

Spring Boot Auto Configuration Magic - Data JPA
    - We added Data JPA and H2 dependencies
        - Spring Boot Auto Configuration does some magic
            - Initialize JPA and Spring Data JPA frameworks
            - Launch an in memory database (H2)
            - Setup connection from App to in-memory database
            - Launch a few scripts at startup (example: data.sql in /resources)
    - You can show the generated query when using methods in jpa repository like .save(), .findById(), etc.
        - By typing in application.properties: spring.jpa.show-sql=true

Remember (Take Notes):
    - H2 is in-memory database
        - It does not persist data
        - Great for learning or testing
        - Not an option for production

Docker Notes
    - Launch MySQL using Docker
        - docker run --detach --env MYSQL_ROOT_PASSWORD=dummypassword --env MYSQL_USER=todos-user --env MYSQL_PASSWORD=dummytodos --env MYSQL_DATABASE=todos --name mysql --publish 3306:3306 mysql:8-oracle
    - Add to application.properties
        - spring.jpa.hibernate.ddl-auto=update
        - spring.datasource.url=jdbc:mysql://localhost:3306/todos
        - spring.datasource.username=todos-user
        - spring.datasource.password=dummytodos
        - spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
    - The mysqlsh Command
        > mysqlsh
        > \connect todos-user@localhost:3306
        > \use todos
        > \sql
        > user todos
        > select * from todo;
        > \quit
    
Changes to MySQL Connector
    - Use mysql-connector-j instead of mysql-connector-java if you are using Spring Boot 3.1 or greater.
    - Remember: groupId is a little different (com.mysql instead of mysql)
    - Here's a history lesson - https://blogs.oracle.com/mysql/post/mysql-connectorj-has-new-maven-coordinates
    - Use this for Spring Boot 3.1 and higher
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
        </dependency>
    - Use this if you are using Spring Boot 3.0 or lower
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency> 