Maven Commands:

1. mvn --version
    - Displays the installed Maven version along with Java version and environment details.

2. mvn help:effective-pom
    - Displays the full, resolved POM, including inherited configurations and dependencies, to show how Maven interprets the project.

3. mvn dependency:tree
    - Shows the project's dependency hierarchy, including transitive dependencies, to help identify conflicts.

4. mvn install
    - Compiles, tests, and packages the project, then installs the built artifact (like a JAR) to the local Maven repository, making it available for other projects on the same machine.

5. mvn compile
    - Compiles the project's source code without running tests, preparing it for packaging or further stages in the build lifecycle.

6. mvn test-compile
    - Compiles the test source code in the project, making it ready for testing phases but without running the tests. This also compiles source files.

7. mvn clean
    - Removes the target repository/directory and all files generated by the previous build, ensuring a fresh start for the next build process.

8. mvn test
    - Runs the unit tests in the project using the compiled test code, executing any testing frameworks specified in the project's configuration.

9. mvn package
    - Compiles the source code, runs tests, and packages the compiled code into a distributable format, such as a JAR or WAR file, which is stored in the target directory.

10. mvn spring-boot:build-image
    - Builds a Docker image for the Spring Boot application based on the project's configuration and dependencies, allowing for easy deployment in containerized environments.