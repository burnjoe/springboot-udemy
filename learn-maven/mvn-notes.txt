1. Maven Dependencies
    - Frameworks & libraries used in a project
    - Example: spring-boot-starter-web and spring-boot-starter-test
    - The reason why there are many dependencies in the classpath is due to Transitive Dependencies
    - Spring dependencies are not the same as Maven dependencies

2. Parent POM
    - Dependency Management: spring-boot-dependencies
    - Properties: java.version, plugins and configurations

3. Name of our Project (groupId + artifactId)
    - groupId: similar to package name
    - artifactId: similar to class name
    - These are important as it is how other projects can use this project as dependency
f

Exploring Maven Build Life Cycle
    - When we run a maven command, maven build life cycle is used
    - Build LifeCycle is a sequence of steps
        1. Validate
        2. Compile
        3. Test
        4. Package
        5. Integration Test
        6. Verify
        7. Install
        8. Deploy (if configured)


How does Maven work?
    - Maven follows Convention over Configuration
        1. Pre defined folder structure
        2. Almost all Java projects follow Maven structure (Consistency)
    - Maven Central Repository contains jars (and others) indexed by artifact id and group id
        - https://repo1.maven.org/
        - Stores all the versions of dependencies
        - repositories > repository
        - pluginRepositories > pluginRepository
    - When a dependency is added to pom.xml, Maven tries to download the dependency
        - Downloaded dependencies are stored inside your maven local repository
        - Local Repository: a temp folder on your machine where maven stores the jar and dependency files that are downloaded from Maven Repository